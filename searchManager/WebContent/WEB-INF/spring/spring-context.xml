<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:security="http://www.springframework.org/schema/security"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation=" http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
        				 http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
        				 http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
        				 http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.0.xsd
						 http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.5.xsd">
	
	<!-- Specify that messages.properties is loaded to load resource bundles.  This means that
		 we can apply overrides to binding messages which aren't very nice -->
	<bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource" scope="singleton" >
		<!-- Custom conversion error messages. -->
		<property name="basenames" >
			<list>
				<value>messages</value>
				<value>build-versions</value>
			</list>
		</property>
	</bean>	
	
	
	<bean id="webAppInitLoader" class="com.search.manager.utility.AppInitLoader" init-method="run" lazy-init="false">
	     	<property name="localCacheService" ref="localCacheService" />
	</bean>
	
	<bean id="propsUtils" class="com.search.manager.utility.PropsUtils">
	     	<property name="localCacheService" ref="localCacheService" />
	</bean>
		
	<context:annotation-config />	

	<!-- Scans within the base package of the application for @Components to configure as beans,
		 @Controller, @Service, @Configuration, etc. -->
	<context:component-scan base-package="com.search.manager" />

	<!-- Enables the Spring MVC @Controller programming model. -->
	<mvc:annotation-driven />
	
	<!-- Enables AOP -->
	<aop:aspectj-autoproxy/>
	 
	<!-- Loads DWR-related configuration -->      
	<import resource="dwr-context.xml" />
	
	<!-- Loads Spring Security -->      
	<import resource="spring-security.xml" />
	
	<!-- Enables our custom @ActiveUser annotation. -->
	<bean id="annotationMethodHandlerAdapter" name="annotationMethodHandlerAdapter" class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
	    <property name="customArgumentResolver" ref="activeUserResolver" />
	</bean>
		
	<bean id="dataSource_solr" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close" scope="singleton" >
			<property name="driverClassName" value="net.sourceforge.jtds.jdbc.Driver" /> 
<!-- 	 		
				dev
				<property name="url" value="jdbc:jtds:sqlserver://BTORCAPDEVSQL01/ED_SOLR" /> 
				staging
				<property name="url" value="jdbc:jtds:sqlserver://AFS-DW-SQQABD1/ED_SOLR" />
-->
			<property name="url" value="jdbc:jtds:sqlserver://BTORCAPDEVSQL01/ED_SOLR" /> 
			<property name="username" value="ED_SOLR_USER" />
			<property name="password" value="s0lRd3V!" />
			<property name="validationQuery" value="select 1"/>
            <property name="testOnBorrow" value="true"/>
            <property name="testOnReturn" value="false"/>
	</bean>
	
	<!--  DAO Services -->	
	<bean name="jdbcTemplate" id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate" scope="singleton">
		<constructor-arg ref="dataSource_solr" />
	</bean>
 
	<bean id="transactionManager3" class="org.springframework.jdbc.datasource.DataSourceTransactionManager" scope="singleton" >
		<constructor-arg ref="dataSource_solr" />
	</bean>
</beans>